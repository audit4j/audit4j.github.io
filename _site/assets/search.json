

[
  
  
    
    
      {
        "title": "Description of an dd",
        "excerpt": "\n",
        "content": "\n",
        "url": "/general/external%20sources/2016/08/27/example-post-one/"
      },
    
  
  
  
  {
    "title": "Documentation",
    "excerpt": "Category index\n",
    "content": "Who we are?\nAudit4j was originally developed by Janith Bandara in 2013 as part of his day job developing enterprise java applications. It is currently being maintained by Janith and a few of his colleagues. You can contact them at admin@audit4j.org\n",
    "url": "/about/"
  },
  
  {
    "title": "Categories",
    "excerpt": "Category index\n",
    "content": "\n",
    "url": "/categories/"
  },
  
  {
    "title": "Documentation",
    "excerpt": "Category index\n",
    "content": "\n\tIntroduction.\n\tRequirements.\n\tInstallation.\n\tConfiguration.\n\n\tConfiguration File.\n\tServlet Context Configurations.\n\tSpring Configurations.\n\n\n\tSending Audit Events.\n\n\tCalling Audit Manager.\n\tUsing Annotations.\n\n\t@Audit\n\t@AuditField\n\t@DeIdentify\n\t@IgnoreAudit\n\n\n\n \n\tImplementing Meta Data class.\n\tUsing Layouts.\n\n\tSimple Layout.\n\tSecure Layout.\n        Customizable Layout.\n\n\n\tData de-identification.\n\tPlugins.\n\n\tDatabase Handler.\n\n\tConfigure Database Handler.\n\tConfigure External Databases.\n\tConfigure jndi Data Sources.\n        External Data Sources.\n        Configure Connection Pool.\n        Multiple tables.\n\n\n\tFile Handler.\n\n\tAuto Archive.\n\n\n\tSpring Integration.\n\n\tConfigurations.\n\tAudit4j Configuration with spring.\n\n\n\tAudit4j for CDI spec implementations (Jboss Weld).\n\n\tConfigurations.\n\n\n\tHTTP Integration.\n\n\tConfigurations.\n\n\n\tCatalina Plugin for Tomcat, JBoss and Wildfly.\n\n\tConfigurations.\n\n\n\tGlassfish Plugin.\n\n\tConfigurations.\n\n\n\tJetty Plugin.\n\n\tConfigurations.\n\n\n\n\n\tCustom Event Filters.\n    Monitoring And Management.\n\tUnit testing with Audit4j.\n    Performance Tuning.\n\tPlugin developments.\n\n \n1. Introduction\nAudit4j is an open source auditing framework which is a full stack application auditing solution for java enterprise projects. Refer the FAQ (frequently asked question) section for an overview of the application and the audit4j framework.\n\nAudit4j is Open Source and available under the Apache 2 License.\n\nDownload from http://audit4j.org/downloads.\n\nCode examples are prepared, which are included in a set of demo projects in order to demonstrate the usage of Audit4j and its plugins. For further information, please refer the following URL in order to access the project on Github.\n\nhttp://github.com/audit4j/audit4j-demo\n\nThis documentation undergoes constant modifications (i.e.: added features, improvements, etc).\n\nThis document serves as the guide to the Audit4j framework. It explains the integration of the application, its configuration, optimization, security and usage of the plugin.\n\n \n2. requirements\nAudit4j has been tested on a common distributions of Linux, Windows and Mac OS. Even though Audit4j is entirely built on Java, it will run on any operating system where the JVM (Java Virtual Machine) is installed. The Audit4j Core 2.x.x binaries require the JDK (Java Development Kit) version 7.0 or above.\n\n \n3. Installation\nYou can download the latest version of Audit4j from the download page, or you can add the repository for Maven, Ant or Gradle. Please refer the download page for more information.\n\n \n4. Configuration\nEven though Audit4j is designed to run with minimum configurations, it still provides various options for customization. Currently, YAML and XML are file formats that are supported.\n\nThe Audit4j configuration module uses a set of predefined instructions to load the config file. This allows the user to externalize the configurations from various locations including the environment variable, system variable, classpath lookup, as well as simple file or directory path. Hence, you can work with the same application code in\ndifferent environments as per the requirement.\n\nThe Audit4j configuration lookup algorithm is in the following order;\n\n\n\t1. Check whether configurations that are directly injected are available in the Context. If available; proceed with the injected configuration. If not, jump to step 7.\n\n\n\t2. Check if the configuration file or directory path is injected to the context. If available, it scans for a YAML (audit4j.conf.yml/audit4j.conf.yaml) or XML (audit4j.conf.xml) configuration file.\n\n\n\t3. Scans for the environment variable called \"AUDIT4J_CONF_FILE_PATH\" in order to locate the configuration file.\n\n\n\t4. Locate the Java system property variable called “audit4j.conf.file.path” to retrieve the configuration file.\n\n\n\t5. Searches for the application classpath in order to load the YAML or XML configuration file.\n\n\n\t6. Check for the user directory (user-dir) for the configuration file. If the file is not available, proceed to step 7.\n\n\n\t7. If config file is not available in the predefined or detected directory, a YAML configuration file with the default options is automatically created.\n\nUsers do not have to create the initial configuration file. If the configuration file is not found, audit4j will automatically create a new configuration file with the default settings in the relevant path, using the above algorithm. It will be easier to make changes around a newly created configuration file.\n\n \n4.1 Configuration File\nAudit4j uses a YAML like markup language in the main configuration file, which will make it easier to read and understand the syntax when compared with a traditional approach (i.e.: XML, JSON, etc). When initializing audt4j, a scan will commence for a configuration file; “audit4j.conf.yml”.\n\nThe sample configuration file will look like;\n!Configuration # Mandetory\n\n# Configure handlers, One or more handlers must be configured.\n\nhandlers:\n- !org.audit4j.core.handler.ConsoleAuditHandler {}\n- !org.audit4j.core.handler.file.FileAuditHandler {}\n\n# Configure layouts, Either one handler must be configured.\n\nlayout: !org.audit4j.core.SecureLayout {}\n\n# Configure meta data.\n\nmetaData: !org.audit4j.core.DummyMetaData {}\n\n# Configure additional properties.\nproperties:\nlog.file.location: user.dir\n\n4.2 Servlet Context Configurations\nFor Java web applications, Audit4j supports the loading of configurations from the web application classpath. Optionally it supports the customization of configuration attributes as context-params in a web.xml file.\n\nServlet context configurations support for Servlet-2.x specification as well as Servlet-3 specification.\n\n\n  For Servlet spec 2.x\n    &lt;listener&gt;\n&lt;listener-class&gt;org.audit4j.core.web.AuditContextListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n    \n  \n\n\nFor servlet 3 spec you don’t want to configure in web.xml.\n\n4.3 Spring Configurations\nAudit4j supports configurations in the spring application context. Please refer the Spring Integration section under Plugins for more information.\n\n5. Sending audit events\n5.1 Calling Audit Manager\nThe easiest way to integrate Audit4j with your application is by adding the Audit4j core module. Download the instructions here. To send audit records you need to call the Audit Manager.\n\nJava\npublic void myMethod(String myParam1, Object myParam2) {\nString actor = MyApplicationContext.getAuthanticatedUser();\nAuditManager manager = AuditManager.getInstance();\nmanager.audit(new AuditEvent(actor, \"myMethod\", new Field(\"myParam1Name\", myParam1),\nnew Field(\"myParam2Name\", myParam2)));\n}\n\n\nScala\ndef myMethod(myParam1: String, myParam2: AnyRef) {\nval actor = MyApplicationContext.getAuthanticatedUser\nval manager = AuditManager.getInstance\nmanager.audit(new AuditEvent(actor, \"myMethod\", new Field(\"myParam1Name\", myParam1), new Field(\"myParam2Name\",\nmyParam2)))\n}\n\n\nOr using Event Builder\nJava\n\nString actor = MyApplicationContext.getAuthanticatedUser();\nEventBuilder builder = new EventBuilder();\nbuilder.addActor(actor).addAction(\"myMethod\").addField(\"myParam1Name\", myParam1).addField(\"myParam2Name\", myParam2);\nAuditManager manager = AuditManager.getInstance();\nmanager.audit(builder.build());\n\n\nScala\n\nval actor = MyApplicationContext.getAuthanticatedUser\nval builder = new EventBuilder()\nbuilder.addActor(actor).addAction(\"myMethod\").addField(\"myParam1Name\", myParam1)\n.addField(\"myParam2Name\", myParam2)\nval manager = AuditManager.getInstance\nmanager.audit(builder.build())\n\n\ngroovy\n\n \n5.2 Using annotations\nWithout writing codes inside the method, audit records can be sent using annotations.\n\nBefore using annotation please refer Meta DataSpring section for more details.\n\nAnnotations can be used through below plugins.\n\n  “”\n  “Weld”\n\n\nThe annotations given below are available with Audit4j.\n\n5.2.1 @Audit\n@Audit annotation can be used either in class level or method level. The following options are available in Audit annotation\n\nExample:\n@Audit\npublic void foo(Integer bar){\n\n\n \n\n[su_table]\n\n\n\n@Audit Attribute\nDescription\nDefault\n\n\naction\nCustom action name.\nMethod name\n\n\nrepository\nUsed to route audit record into different repositories. As an example, for a different audit table. repository is given by the table name.\ndefault\n\n\n\n[/su_table]\n\n \n5.2.2 @AuditField\n@AuditField Annotation is used to mark parameters which will include in the audit event.\n\n[su_table]\n\n\n\n@AuditField\nAttributes\nDescription\n\n\nfield\nMarked field name.\n\n\n\n[/su_table]\n\n \n\n5.2.3 @IgnoreAudit\nThis annotation can be used in below scenarios.\n\n\n  When The particular class marked for audit using @Audit annotation but specific method should not be audited, This annotation can be added.\n\n\nExample:\n@Audit\npublic class UserService {\n@IgnoreAudit\npublic void changePassword(String oldPassword, String newPassword) {\n// This method will not be audited.\n}\n}\n\n\n\n  Mark method field which should not be audited.\n\n\npublic class UserService {\n@Audit\npublic void login(String username, @IgnoreAudit String password) {\n// password parameter will not be audited.\n}\n}\n\n\n\n  Skip auditing method object field.\n\n\npublic class UserService {\n@Audit\npublic void saveUser(User user) {\n// password parameter in user object will not be audited.\n}\n}\n\n\npublic class User {\n\nprivate String username;\n@IgnoreAudit\nprivate String password;\n\n//Getters and Setters\n}\n\n\n \n5.2.4 @DeIdentify\n@DeIdentify can be used to deidentify certain fields. This applies a mask for certain characters with ‘*’. Please read Data De-identification section for more information.\n\nExample:\n\n@Audit\npublic void saveCreditCardId(@DeIdentify(left=5) int cardId){\n\n\nSample input card id: 123456789\nAudited record: *****6789\n\n[su_table]\n\n\n\n@DeIdentify\nAttributes\nDescription\n\n\nleft\nDe identify left characters. Ex: @DeIdentify(left=3) -&gt; ***456789\n\n\nright\nDe identify rightcharacters. Ex: @DeIdentify(right=3) -&gt; 123456***\n\n\nfromLeft\nDe identify all characters from the position left. Ex: @DeIdentify(fromLeft=3) -&gt; 123******\n\n\nfromRight\nDe identify all characters from the position right. Ex: @DeIdentify(fromRight=3) -&gt; ******789\n\n\n\n[/su_table]\n\n \n6 Meta Data Implementation\nIf you are using annotations to capture audit records, a custom meta-data class should be implemented. Audit4j will not receive certain information using annotations (i.e.: information regarding the logged in user and origin). In such a scenario, Audit4j will add some dummy data into your audit record. This can be carried out easily by implementing org.audit4j.core.MetaData class.\n\nExample for the custom metadata implementation:\n\nimport org.audit4j.core.MetaData;\npublic class MyMetaData implements MetaData{\n@Override\npublic String getActor() {\nreturn MyContext.getAuthanticatedUSer();\n}\n\n    @Override\n    public String getOrigin() {\n        return MyContext.getRemoteAddress();\n    }\n}\n\n\nConfigurations:\n\n[js]\n!Configuration\n…\nConfigure meta data.\nmetaData: !com.myapp.meta.MyMetaData {}\n…\n[/js]\n\n \n7 Using layouts\nLayouts allow you to format individual audit events when it is being stored in the file or console. This will provide out-of-the-box support to encrypt, encode, organize, separate and filter audit information.\n\nHere is an example of a formatted audit event;\n08/16/2014 13:52:09|Audit4j User|Origin3|myMethod3==&gt;myParam1Name03 java.lang.String:param103,\n \n7.1 Simple Layout\nSimple layout will format audit information by applying special characters (pipe-|,space, comma, arrow - =&gt;&gt; and colon - : ).\n\nConfigurations:\n\n[js]\n!Configuration\n…\nConfigure layout\nlayout: !org.audit4j.core.SimpleLayout{}\ndateFormat: MM-dd-yyyy HH:mm:ss # Optional. Default will use MM/dd/yyyy HH:mm:ss\n…\n[/js]\n\n \n7.2 Secure layout\nUsing the secure layout you will be able to encrypt sensitive audit information.\nIf you are using the secure layout you need to add a secure key and salt in the Audit4j configurations as below.\n\nConfigurations:\n\n[js]\n!Configuration\n…\nConfigure layout\nlayout: !org.audit4j.core.SecureLayout{}\ndateFormat: MM-dd-yyyy HH:mm:ss # Optional. Default will use MM/dd/yyyy HH:mm:ss\n…\n[/js]\n\n7.3 Customizable Layout\nBy using a customizable layout, the output format can be modified using templates. The Audit4j event stream gives you the following variables to build a template for a customizable layout.\n\n${eventDate} - Event created date time\n${uuid} - Auto generated uuid\n${actor} - Actor\n${action} - Action\n${origin} - Origin\n${fields} - Audit Fields\n\nThe operations below can be used as a option\nlooping:\n${foreach fields field}${field.name} ${field.type}:${field.value}, ${end}\n\nConditions:\n${if fields == null} No Results ${end}\n\nExample for a template.\n\n\n  \n    \n      ${eventDate}\n      ${uuid}\n      ${actor}\n      ${action}\n      ${origin} =&gt; ${foreach fields field}${field.name} ${field.type}:${field.value}, ${end}\n    \n  \n\n\nThe Java Minimal Template Engine (JMTE) is the best template engine we found so far in terms of performance. Thus, all the syntax of JMTE can be applied to Customizable Layouts.\n\n \n8 Data de-identification\nOn certain occasions, users will want to audit sensitive information (User email addresses, Credit card numbers, etc). This information should be unidentifiable to third parties, but still at some extent be identifiable to achieve our purposes. This can be achieved using the de-identify feature in the Audit4j platform.\nDe-identification currently supports annotations called “@DeIdentify” which can be used in fields level.\n\nPlease see @DeIdentify annotation for more information.\n\n \n9 Plugins\n \n9.1 Database handler\nDatabase audit handler supports the capturing of audit records with popular databases (MySQL, Oracle, SQL Server, etc.). HSQLDB is embedded in to the database audit handler, but we are not recommending to use it in production systems since sensitive audit records better to store in a different location managed by the user.\n\n \n9.1.1 Configure database handler\nBefore starting the configuration you should refer the configuration section in the audit4j documentation.\n\nThe following line should be added under the handler: section in the audit4j.conf.yml file.\n- !org.audit4j.handler.db.DatabaseAuditHandler{}\nAfter this configuration Audit4j will record any audit events in the embedded database. The database file will automatically be created in the class-path. If you want to configure any other database, please refer the Database Configuration section below.\n\n \n9.1.2 Configure external databases\nIf you want to configure any other database, you should disable the one already active. You then need to select the connection type; if it is a single connection, a connection pool or a jndi data source.\n\nconnection type parameters as below:\nSingle Connection - single\nConnection Pool - pooled\nJndi Datasource - jndi\n\nOther configurations are usual connection parameters.\n\n[js]\n\n  !org.audit4j.handler.db.DatabaseAuditHandler\nembeded: false\ndb_connection_type: pooled\ndb_driver: com.mysql.jdbc.Driver\ndb_url: jdbc:mysql://localhost/audit4j\ndb_user: username\ndb_password: password\n[/js]\n\n\n \n9.1.3 Configure jndi datasources\n \n\n[js]\n\n  !org.audit4j.handler.db.DatabaseAuditHandler\nembeded: false\ndb_connection_type: jndi\ndb_jndi_datasource: java:comp/env/jdbc/database\n[/js]\n\n\n \n9.1.4 External Data Sources.\nExternal data sources can be directly injected into the audit4j configurations before starting the audit4j server. Noted below is an example for the spring configuration.\n\n@Bean\npublic DataSource dataSource() {\n// Application Datasource configurations.\n}\n\n@Bean\npublic DatabaseAuditHandler databaseHandler() {\nDatabaseAuditHandler dbHandler = new DatabaseAuditHandler();\ndbHandler.setEmbedded(\"false\");\ndbHandler.setDataSource(dataSource());\nreturn dbHandler;\n}\n\n\n \n9.1.5 Configure Connection Pool.\nThe Audit4j Database plugin uses Hikari as its default connection pool. The Audit4j DB API exposes the additional configuration options in order to fine-tune the connection pool. The following parameters are supported as optional configuration options.\n\n[su_table]\n\n\n\nProperty\nDescription\nDefault value\n\n\ndb_pool_autoCommit\nThis property controls the default auto-commit behavior of connections returned from the pool\ntrue\n\n\ndb_pool_connectionTimeout\nControls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool\n3000 (30 seconds)\n\n\ndb_pool_idleTimeout\ncontrols the maximum amount of time that a connection is allowed to sit idle in the pool\n\n\n\ndb_pool_maxLifetime\ncontrols the maximum lifetime of a connection in the pool.\n\n\n\ndb_pool_minimumIdle\nThis property controls the minimum number of idle connections that HikariCP tries to maintain in the pool.\n\n\n\ndb_pool_maximumPoolSize\nThis property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections.\n100\n\n\n\n[/su_table]\n9.1.6 Multiple tables.\nAn audit stream can be routed to multiple tables in a database handler. This feature can be activated by enabling separate table configurations as below.\n\n[js]\n\n  !org.audit4j.handler.db.DatabaseAuditHandler\nseparate: true\n[/js]\n\n\nif you are using annotations events can be tagged for the table name in @audit annotation or simply add tagged information to audit event..\n\n@Audit (tag=”login”)\n\n\n9.2 File handler\nAudit4j in-built file handler will save audit events in files with various configuration options.\nConfiguration:\n\n[js]\n!Configuration\n\nhandlers:\n\n  !org.audit4j.core.handler.file.FileAuditHandler {}\n[/js]\n\n\n9.2.2 Auto Archive\n \n9.3 Spring Integration\nAudit4j-Spring is a plugin for Audit4j for integration between Spring and Audit4j Core. It will enable the below features in addition to the core functionalities.\n\n\tAnnotation driven auditing.\n\tConfigurations in the Spring Application Context.\n\n \n9.3.1 Configurations\nSpring integration extension enables the annotation processing using two ways. You can use either one method as you preferred.\n\n\n  Spring AOP configurations:\n\n\n[xml]\n\n\n\n\n\n[/xml]\n\n\n  Spring Advice configurations:\nThe bean given below should be configured in the spring configuration file.\n\n\n[xml][/xml]\n\nAfter initiating the bean, it should be injected in to the spring transaction proxy under the particular Service as follows;\n\n[xml]\n\n\n\n\n\n\n\n\nauditAdvice\n\n\n\n[/xml]\n\n \n9.3.1 Audit4j Configuration with spring\nThe Audit4j-Spring plugin supports out-of-the-box configuration options with spring. The bean shown below should be configured in the spring application context.\n\n[xml]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[/xml]\n\n \n9.4 Audit4j for CDI spec implementations (Jboss Weld)\n[su_label type=”warning”]beeta[/su_label]\n9.4.1 Configurations.\nConfiguration for Jboss Weld:\n\n[xml]\n&lt;beans\n…\n\norg.audit4j.intregration.cdi.AuditInterceptor\n\n&lt;/beans&gt;\n[/xml]\n\n \n9.5 HTTP Integration.\n9.5.1 Configurations.\nweb.xml configuration.\n\n[xml]\n\nauditFilter\norg.audit4j.intregration.http.AuditFilter\n\n\n\n   auditFilter\n   /*\n\n[/xml]\n\n \n9.6 Catalina Plugin for Tomcat, JBoss and Wildfly.\n[su_label type=”warning”]beeta[/su_label]\n9.6.1 Configurations.\nPut audit4j-core-2.3.1-all.jar(or higher) and audit4j-tomcat-2.3.1.jar in the tomcat ‘lib’ directory.\nAdd the following Valve line to Tomcat’s server.xml file. The ‘Engine’ line is used to show context.\n\n[xml]\n\n\n[/xml]\n\n&nbsp;\n9.7 Glassfish Plugin\n[su_label type=\"warning\"]beeta[/su_label]\n9.7.1 Configurations.\nFor glashfish 4.0+\n\n[xml]\n&lt;sun-web-app ...&gt;\n...\n\n&lt;/sun-web-app&gt;\n[/xml]\n\n&nbsp;\n9.8 Jetty Plugin\n[su_label type=\"warning\"]beeta[/su_label]\n9.8.1 Configurations.\nFor Jetty 8,9+\nServer Mode:\n\n[xml]\n\n...\n\n\n\n\n[/xml]\n\nEmbedded Mode:\n\n```java\nServer server=new Server(8080);\n...\nAudit4jJettyHandler wrapper =  new Audit4jJettyHandler();\nserver.setHandler(wrapper);\nserver.start();\n}\n```\n\nFor Jetty 6.1.5\nServer Mode:\nPut audit4j-core-2.3.1.jar(or higher) and audit4j-tomcat-2.3.1.jar in the jetty 'lib/etc' directory.\n\n[xml]\n\n...\n\n\n\n\n[/xml]\n\n&nbsp;\n10 Custom Event Filters.\nCustom filters are used to screen audit events. Custom filter should implement AuditEventFilter interface.\n\nSample custom event filter implantation, This filter will not accepts the events with action \"DummyAction\".\n\n```java\npublic class CustomFilter implements AuditEventFilter {\n@Override\npublic boolean accepts(AuditEvent event) {\nif (event.getAction().equals(\"DummyAction\")) {\nreturn false;\n}\nreturn true;\n}\n```\n\nOptionally filters provides the filter query language to simplify the development. Below filter will filter events with action, \"Action1\" or \"Action2\".\n\n```java\npublic class CustomFilterWithQuery implements AuditEventFilter{\n@Override\npublic boolean accepts(AuditEvent event) {\nif (query.from(event).with(\"action\").eq(\"Action1\").or().eq(\"Action2\").evaluate()) {\nreturn false;\n}\nreturn true;\n}\n```\n\n&nbsp;\n11 Monitoring And Management\nAudit4j can be monitored and managed using Java Management Extensions (JMX). In other words, JMX can be used to monitor the Audit4j server status and manage basic server operations including starting, stopping, enabling and disabling. JMX can be enabled via the configuration due to the fact that the JMX setting is disabled by default. Use below configurations to enable JMX.\n\n[js]\njmx: !org.audit4j.core.jmx.JMXConfig {}\n[/js]\n\n&nbsp;\n12 Unit testing with audit4j\nAudit4j supports the use of different settings other than production settings for unit tests in Audit4j integrated applications. Different configurations for test scope will be supported by Audit4j. As an example, if you need to point to a different database for audit trails in your unit tests, Audit4j provides an API which enables the use of different configurations in unit test classes.\n\nConfigurations should be added to a setup method in your unit test class before initiating Audit4j.\n\n```java\n@Before\npublic void before() {\nAuditManager.startWithConfiguration(\"/home/audit4j/audit4j-test.conf.yml\");\n}\n```\n\nWrite your test cases as usual.\n\n```java\n@Test\npublic void test(){\n......\n}\n```\n\n&nbsp;\n\nMake sure you shut down the Audit4j context in teardown method to clear the audit4j resources.\n\n```java\n@After\npublic void after() {\nAuditManager.getInstance().shutdown();\n}\n```\n\n&nbsp;\n13 Performance Tuning\nAudit4j supports limited options to improve performance in your application. These options are not enabled by default because they are highly depend on your applications’ nature and the system environment.\n13.1 Metadata lookup in async mode\nBy default metadata lookup is setted to sync mode and this can be changed to async mode by using below configuration.\n\n[js]\ncommands: -metadata=async\n[/js]\n\nWarning: The metadata lookup will not work if your application framework doesn’t allow invoking metadata information asynchronously.\n\n&nbsp;\n14 Plugin Development\n\n",
    "url": "/documentation/"
  },
  
  {
    "title": "Documentation",
    "excerpt": "Category index\n",
    "content": "What is Audit4j?\nAudit4j is comprehensive auditing framework which can be used to track any kind of audit log including server, application and database. Audit4j is entirely annotation driven, hence you can adopt to your application using minimum configurations.\nWhat is different between Audit trace and Log?\nA log is often unpreserved whereas; an audit trace is secure and preservable. As a result, recording sensitive information, or data which will be required at a later time will not be handled by a log. Other issue is usually logs are not recording actor(Who did),  action(What did) and origin(Comes from), but audit log should contains those information. However, an audit trail addresses these issues.\nWhat are the main features of Audit4j?\n\n  Can be Asynchronous/Synchronous, according to the requirement.\n  Scalable.\n  Fully customizable annotations.\n  In-built plugins (File and Console).\n  Minimum configurations.\n  Rich extendible API - Custom/third party plugins can be used by via the API.\n\n\nHow is the performance after integrating the Audit4J with my application?\nAudit4J supports asynchronous events (and synchronous events – depends on the requirement).  Since the architecture is based on asynchronous event mechanisms, application will not be added additional latency (or less than 10 micro second.) after integrating the audit4j and its plugins.\n\nHow does the Audit4j architecture work?\nAudit4J is entirely based on a modular architecture. There are three different types of plugins that support connecting various types of external tools with the core module.\n\n\n  Caller Plugins - Sending audit events from various sources.\n  Layout Plugins - Format and organize audit events.\n  Handler Plugins - Process and save audit information.\n\n\nThe javadoc  can be referred in order to obtain further information regarding this.\nCurrently, what are the available integrations for Audit4j?\n1.Audit4j-Spring Integration.\n2.Audit4j-Weld Integration.\n3.Audit4j-Guice Integration.\n4.Audit4j-database Integration.\n5.Audit4j-http.\n",
    "url": "/faq/"
  },
  
  {
    "title": "About Audit4j",
    "excerpt": "\n",
    "content": "Audit4j is an open source project to build a highly pluggable, embedded, asynchronous, secure, annotation driven and high performance audit suite. It’s core is entirely written in java but still exposing the Scala and Groovy friendly API.\nAudit4j can be used to audit events related to Servers, Applications and Databases. The architecture is designed to achieve high modularity and high performance.\nFor more information refer the Faq page. For user guide visit the documentation page.\n\nFork it  github\n\n Buy me a coffee ☕️\n Tweet it  twitter\n\n\nFeatures\n\n\n  Asynchronous\n  Very high performance\n  Fully customizable annotations\n  In-built plugins (File and Console)\n  Auto archive\n  De-Identification\n  Minimum configurations\n  Encrypted audit trails\n  Supports for Java, Scala and Groovy\n  Rich extendable API – Custom/third party plugins can be implemented by via the API\n\n",
    "url": "/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": "{% include site-search.html %}\n",
    "url": "/search/"
  }
  
]

